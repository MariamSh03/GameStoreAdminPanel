2025-01-28 23:14:08.704 [INF] === Request Details 2025-01-28 19:14:08 ===
IP Address: ::1
URL: GET /index.html
Status Code: 200
Elapsed Time: 176ms
Request Content:

Response Content:
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="stylesheet" type="text/css" href="./index.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
       
</head>

<body>
    <div id="swagger-ui"></div>

    <script src="./swagger-ui-bundle.js" charset="utf-8"></script>
    <script src="./swagger-ui-standalone-preset.js" charset="utf-8"></script>
    <script src="index.js" charset="utf-8"></script>
</body>
</html>


2025-01-28 23:14:09.114 [INF] === Request Details 2025-01-28 19:14:09 ===
IP Address: ::1
URL: GET /index.js
Status Code: 200
Elapsed Time: 2ms
Request Content:

Response Content:
/* Source: https://gist.github.com/lamberta/3768814
 * Parse a string function definition and return a function object. Does not use eval.
 * @param {string} str
 * @return {function}
 *
 * Example:
 *  var f = function (x, y) { return x * y; };
 *  var g = parseFunction(f.toString());
 *  g(33, 3); //=> 99
 */
function parseFunction(str) {
    if (!str) return void (0);

    var fn_body_idx = str.indexOf('{'),
        fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
        fn_declare = str.substring(0, fn_body_idx),
        fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
        args = fn_params.split(',');

    args.push(fn_body);

    function Fn() {
        return Function.apply(this, args);
    }
    Fn.prototype = Function.prototype;

    return new Fn();
}

window.onload = function () {
    var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
    var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

    // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
    configObject.urls.forEach(function (item) {
        if (item.url.startsWith("http") || item.url.startsWith("/")) return;
        item.url = window.location.href.replace("index.html", item.url).split('#')[0];
    });

    // If validatorUrl is not explicitly provided, disable the feature by setting to null
    if (!configObject.hasOwnProperty("validatorUrl"))
        configObject.validatorUrl = null

    // If oauth2RedirectUrl isn't specified, use the built-in default
    if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
        configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

    // Apply mandatory parameters
    configObject.dom_id = "#swagger-ui";
    configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
    configObject.layout = "StandaloneLayout";

    // Parse and add interceptor functions
    var interceptors = JSON.parse('{}');
    if (interceptors.RequestInterceptorFunction)
        configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
    if (interceptors.ResponseInterceptorFunction)
        configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

    if (configObject.plugins) {
        configObject.plugins = configObject.plugins.map(eval);
    }
    
    // Begin Swagger UI call region

    const ui = SwaggerUIBundle(configObject);

    ui.initOAuth(oauthConfigObject);

    // End Swagger UI call region

    window.ui = ui
}


2025-01-28 23:14:09.555 [INF] === Request Details 2025-01-28 19:14:09 ===
IP Address: ::1
URL: GET /swagger/v1/swagger.json
Status Code: 200
Elapsed Time: 12ms
Request Content:

Response Content:
{
  "openapi": "3.0.1",
  "info": {
    "title": "AdminPanel.Web",
    "version": "1.0"
  },
  "paths": {
    "/games": {
      "get": {
        "tags": [
          "Game"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/games/create": {
      "post": {
        "tags": [
          "Game"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/games/{key}/update": {
      "put": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/games/{key}": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/genres/{id}/games": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "genreId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/platforms/{id}/games": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "platformId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/games/{key}/file": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Genre/Genre": {
      "get": {
        "tags": [
          "Genre"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Genre"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenreDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GenreDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GenreDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Genre/Genre/{id}": {
      "get": {
        "tags": [
          "Genre"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Genre"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Genre/Genre/{id}/update": {
      "put": {
        "tags": [
          "Genre"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenreDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GenreDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GenreDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/platforms/Platform": {
      "get": {
        "tags": [
          "Platform"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlatformDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlatformDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlatformDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Platform"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/platforms/Platform/{id}": {
      "put": {
        "tags": [
          "Platform"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Platform"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/games/{key}/platforms": {
      "get": {
        "tags": [
          "Platform"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlatformDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlatformDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlatformDto"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GameDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "genreIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "platformIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GenreDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "parentGenreId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlatformDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}

2025-01-28 23:14:16.770 [INF] === Request Details 2025-01-28 19:14:16 ===
IP Address: ::1
URL: GET /games
Status Code: 200
Elapsed Time: 77ms
Request Content:

Response Content:
[
  {
    "id": "875e2865-87af-4df5-2e41-08dd3e4a90cd",
    "name": "tik-tak-to",
    "key": "012",
    "description": "x and 0"
  },
  {
    "id": "3db35310-6e40-46f4-ccb6-08dd3e4c9fa5",
    "name": "string",
    "key": "string",
    "description": "string"
  },
  {
    "id": "95eaf0dc-b012-410a-412e-08dd3e4f98f6",
    "name": "test2",
    "key": "002",
    "description": "sport game in browser"
  },
  {
    "id": "0536e0b4-48bd-4861-412f-08dd3e4f98f6",
    "name": "test3",
    "key": "003",
    "description": "sport gamer"
  },
  {
    "id": "f5a4af61-d2a7-44cc-6d63-08dd3ed65256",
    "name": "tiko",
    "key": "0101",
    "description": "browser game 001"
  }
]

2025-01-28 23:14:18.394 [INF] === Request Details 2025-01-28 19:14:18 ===
IP Address: ::1
URL: GET /games
Status Code: 200
Elapsed Time: 2ms
Request Content:

Response Content:
[
  {
    "id": "875e2865-87af-4df5-2e41-08dd3e4a90cd",
    "name": "tik-tak-to",
    "key": "012",
    "description": "x and 0"
  },
  {
    "id": "3db35310-6e40-46f4-ccb6-08dd3e4c9fa5",
    "name": "string",
    "key": "string",
    "description": "string"
  },
  {
    "id": "95eaf0dc-b012-410a-412e-08dd3e4f98f6",
    "name": "test2",
    "key": "002",
    "description": "sport game in browser"
  },
  {
    "id": "0536e0b4-48bd-4861-412f-08dd3e4f98f6",
    "name": "test3",
    "key": "003",
    "description": "sport gamer"
  },
  {
    "id": "f5a4af61-d2a7-44cc-6d63-08dd3ed65256",
    "name": "tiko",
    "key": "0101",
    "description": "browser game 001"
  }
]

